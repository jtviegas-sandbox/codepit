use tate

# query A
db.artists.find({"activePlaceCount":{"$gt":0}, "activePlaces.placeName":"London"})

# query B
db.artworks.find( function () {

    function inspectChildrenElement(doc){
        return Object.keys(doc).some(function(key) {
            if( key === "children" && Array.isArray(doc[key]))
                return inspectChildrenArray(doc[key]);
            else
                if( key === "name" && "arm/arms raised" === doc[key] )
                    return true;
        });
    }

    function inspectChildrenArray(doc){
        var i = 0;
        for( i=0; i<doc.length; i++ ){
            var el = doc[i];
            return inspectChildrenElement(el)
        }
    }

    function inspectSubjects(doc){
        return Object.keys(doc).some(function(key) {
            if( key === "children" && Array.isArray(doc[key]))
                return inspectChildrenArray(doc[key]);
      });
    }

    function inspection(doc) {
      return Object.keys(doc).some(function(key) {
        if( key === "subjects" )
            return inspectSubjects(doc[key])
      });
    }

    return inspection(this);
  })


# --- indexes ---
# these 2 indexes improve the query A execution time to 1ms from 5ms
db.artists.createIndex({"activePlaces.placeName": 1})
db.artists.createIndex({"activePlaceCount":1})

# in the case of query B we could create:
db.artworks.createIndex({"subjects.children.name": 1, "subjects.children.children.name": 1, "subjects.children.children.children.name": 1})
# ... but there is no effect in the query execution

# in a general approach to the reasonably expected queries we probably would want to create indexes
# ... artworks collection: contributor name
db.artworks.createIndex({"contributors.fc":1})
# artists collection: artist name
db.artists.createIndex({"fc":1})
