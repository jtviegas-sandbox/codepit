package org.challenges.csloganalyzer;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.nio.file.Paths;

import org.challenges.csloganalyzer.model.transformation.Transformer;
import org.challenges.csloganalyzer.service.Store;
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.fasterxml.jackson.databind.ObjectMapper;

@ActiveProfiles("test")
@SpringBootTest(classes = { Configuration.class })
@RunWith(SpringJUnit4ClassRunner.class)
public class CsLogAnalyzerTest {

	@Autowired
	private Store store;

	@Autowired
	private ObjectMapper jsonMapper;

	@Autowired
	private ThreadPoolTaskExecutor threadPoolTaskExecutor;

	@Autowired
	private Transformer transformer;

	@Test
	public void test_01() {

		new CsLogAnalizer(store, jsonMapper, threadPoolTaskExecutor, transformer)
				.handle(Paths.get(CsLogAnalyzerTest.class.getClassLoader().getResource("test_1").getPath()));
		assertEquals(18, store.getLogCount());
		assertTrue(store.getLog("scsmbstgra").get().getAlert());
	}

	@Test
	public void test_02() {

		new CsLogAnalizer(store, jsonMapper, threadPoolTaskExecutor, transformer)
				.handle(Paths.get(CsLogAnalyzerTest.class.getClassLoader().getResource("test_2").getPath()));
		assertEquals(20, store.getLogCount());
	}

	@Test
	public void test_03() {
		new CsLogAnalizer(store, jsonMapper, threadPoolTaskExecutor, transformer).handle(Paths.get("test_3"));
		assertEquals(20, store.getLogCount());
	}
}
